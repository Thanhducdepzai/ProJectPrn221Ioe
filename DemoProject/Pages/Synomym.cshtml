@page
@model ProjectIoePrn.Pages.SynomymModel
@{
    ViewData["Title"] = "Synonym Matching Game";
    var data = ViewData["data"] as List<string>;
    var list = ViewData["list"] as List<ProjectIoePrn.Models.Question>;

    var combinedList = new List<(string Content, string Id)>();
    if (list != null)
    {
        foreach (var dataItem in list)
        {
            combinedList.Add((dataItem.QuestionMetadata, $"metadata-{dataItem.QuestionId}"));
            combinedList.Add((dataItem.QuestionText, $"text-{dataItem.QuestionId}"));
        }

        // Shuffle the combined list
        var rnd = new Random();
        combinedList = combinedList.OrderBy(x => rnd.Next()).ToList();
    }
}

<div class="game-container">
    <div class="grid">
        @if (combinedList != null)
        {
            @foreach (var item in combinedList)
            {
                <div class="cell" id="@item.Id">@item.Content</div>
            }
        }
    </div>
    <div class="info-container">
        <div class="scoreboard">
            <div class="score">Score: <span id="score">0</span></div>
            <div class="timer">Time: <span id="timer">20:00</span></div> <!-- Update with your initial time -->
            <div class="user-info">
                <p>Hoang Thu Phuong</p>
                <p>ID: 986045960</p>
            </div>
        </div>
    </div>
</div>

<form id="quizForm" method="post">
    <input type="hidden" id="finalScore" name="FinalScore" value="0" />
    <input type="hidden" id="timeSpent" name="TimeSpent" value="0" />
</form>

<style>
    .active {
        border: 3px solid yellow;
    }

    .game-container {
        margin-top: 100px;
    }

    .disappear {
        visibility: hidden;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var cells = document.querySelectorAll(".cell");
        var firstSelectedCell = null;
        var score = 0;
        var timeLeft = 1200; // Time in seconds

        function updateScore() {
            document.getElementById("score").textContent = score;
        }

        function updateTime() {
            var minutes = Math.floor(timeLeft / 60);
            var seconds = timeLeft % 60;
            document.getElementById("timer").textContent =
                (minutes < 10 ? "0" : "") + minutes + ":" +
                (seconds < 10 ? "0" : "") + seconds;
        }

        function countdown() {
            if (timeLeft > 0) {
                timeLeft--;
                updateTime();
            } else {
                clearInterval(timerInterval);
                gameOver(); // Call gameOver function when time runs out
                // Handle end of game
                alert("Time's up! Game over!");
            }
        }

        var timerInterval = setInterval(countdown, 1000);

        cells.forEach(function (cell) {
            cell.addEventListener("click", function () {
                // Nếu cell hiện tại đã bị ẩn, không làm gì cả
                if (cell.classList.contains("disappear")) return;

                // Nếu không có cell nào đang được chọn, chọn cell hiện tại
                if (!firstSelectedCell) {
                    this.classList.add("active");
                    firstSelectedCell = this;
                } else {
                    // Nếu đã có cell được chọn trước đó và cell đó không phải là cell hiện tại, xử lý nối từ
                    if (firstSelectedCell !== this) {
                        this.classList.add("active");

                        // Kiểm tra nếu id của hai cell giống nhau (bỏ qua tiền tố "metadata-" hoặc "text-")
                        var firstId = firstSelectedCell.id.split('-')[1];
                        var secondId = cell.id.split('-')[1];

                        if (firstId === secondId) {
                            // Thêm lớp disappear để ẩn chúng và loại bỏ lớp active
                            firstSelectedCell.classList.add("disappear");
                            firstSelectedCell.classList.remove("active");
                            cell.classList.add("disappear");
                            cell.classList.remove("active");

                            // Tăng điểm và cập nhật hiển thị
                            score += 10;
                            updateScore();
                        }

                        // Sau khi kiểm tra, xóa lớp active khỏi cả hai cell nếu không trùng khớp
                        setTimeout(function () {
                            if (!firstSelectedCell.classList.contains("disappear")) {
                                firstSelectedCell.classList.remove("active");
                            }
                            if (!cell.classList.contains("disappear")) {
                                cell.classList.remove("active");
                            }
                            firstSelectedCell = null;
                        }, 100); // Xóa lớp active sau 1 giây để thấy rõ
                    }
                }
            });
        });

        function checkGameCompletion() {
            var allCellsDisappeared = true;
            cells.forEach(function (cell) {
                if (!cell.classList.contains("disappear")) {
                    allCellsDisappeared = false;
                    return;
                }
            });

            if (allCellsDisappeared || timeLeft <= 0) {
                gameOver(); // Call gameOver function when all cells have disappeared or time runs out
            }
        }

        function gameOver() {
            clearInterval(timerInterval); // Stop the timer

            // Update hidden fields with final score and time spent
            document.getElementById("finalScore").value = score;
            document.getElementById("timeSpent").value = 1200 - timeLeft; // Assuming 1200 is the initial time in seconds

            // Submit the form
            document.getElementById("quizForm").submit();
        }

        setInterval(checkGameCompletion, 1000); // Check game completion every second

        updateTime(); // Cập nhật hiển thị thời gian ban đầu
    });
</script>
